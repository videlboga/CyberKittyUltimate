# Voice Avatar MCP Server - Правила для Cursor

## Общая информация
- Название проекта: Voice Avatar MCP Server
- Описание: MCP-сервер для голосового интерфейса с анимированным персонажем
- Язык: Python 3.12+
- Технологии: Piper TTS, Browser-Use, MCP Protocol, V-Express, NVIDIA CUDA 12.6, PyTorch

## Инструменты MCP-сервера

### speak_text
Преобразует текст в речь с использованием Piper TTS.

```python
# Пример использования:
from cursor_plugin.voice_avatar_plugin import speak_text_sync

speak_text_sync("Привет, мир!")
# или с указанием модели голоса
speak_text_sync("Привет, мир!", "ru_RU-irina-medium")
```

### echo_message
Простой тестовый инструмент, возвращающий переданное сообщение.

```python
# Пример использования:
from cursor_plugin.voice_avatar_plugin import echo_message_sync

echo_message_sync("Привет, это тестовое сообщение!")
```

### browse_website
Автоматизирует работу с браузером с использованием Browser-Use.

```python
# Пример использования:
from cursor_plugin.voice_avatar_plugin import browse_website_sync

browse_website_sync("https://example.com", "найти контактную информацию")
```

### speak_with_avatar
Создает видео с говорящим аватаром.

```python
# Пример использования:
from cursor_plugin.voice_avatar_plugin import speak_with_avatar_sync

speak_with_avatar_sync("Привет, мир!", "/home/cyberkitty/my_mcp/assets/images/example.jpg")
```

## Структура проекта
- `voice_avatar_mcp_starlette.py` - Основной файл MCP-сервера
- `start_mcp.sh` - Скрипт запуска MCP-сервера
- `output/` - Директория для выходных файлов (речь, результаты браузера)
- `cursor_plugin/` - Плагин для интеграции с Cursor
- `assets/images/` - Изображения для аватаров
- `models/tts/` - Модели для синтеза речи

## Правила для Cursor

### Основные правила
1. MCP-сервер запускается автоматически при загрузке системы через systemd
2. Для проверки статуса MCP-сервера используйте команду: `sudo systemctl status voice-avatar-mcp.service`
3. При обращении к файлам всегда используйте абсолютный путь: `/home/cyberkitty/my_mcp/...`
4. Для работы с Browser-Use необходим API ключ OpenAI (добавьте в `.env` файл)
5. В примерах кода предпочитайте асинхронное выполнение для сложных операций
6. Для русского языка предпочтительно используйте модель ru_RU-irina-medium
7. При работе с большими текстами разбивайте их на части по смыслу для лучшего результата
8. Результаты генерации (аудио и видео) сохраняются в `/home/cyberkitty/my_mcp/output/`

### Горячие клавиши в Cursor
- `Alt+P` → `speak_selection` - Синтезировать речь из выделенного текста
- `Alt+B` → `browse_selection` - Открыть браузер и выполнить задачу
- `Alt+E` → `explain_selection` - Объяснить код и озвучить объяснение
- `Alt+I` → `get_tools_info` - Получить информацию о доступных инструментах

### Голосовые команды
- **"Перевести в речь"** — Преобразует выделенный текст в речь
- **"Найди информацию о [тема]"** — Выполняет поиск информации о указанной теме
- **"Объясни код"** — Объясняет выделенный фрагмент кода
- **"Показать инструменты"** — Показывает список доступных инструментов

## Полезные команды
- `python3 voice_avatar_mcp_starlette.py` - Запуск MCP-сервера вручную
- `curl http://localhost:8000/mcp/info` - Получение информации о доступных инструментах
- `python3 cursor_plugin/examples.py` - Запуск примеров использования плагина

## Меню в Cursor
- Основное меню: `Инструменты > Voice Avatar MCP`
  - Преобразовать выделенное в речь
  - Найти информацию
  - Объяснить код
  - Получить список инструментов

- Контекстное меню редактора: `Voice Avatar`
  - Преобразовать в речь
  - Найти информацию
  - Объяснить код

## Кодовые стандарты
- Используйте современный Python 3.12+ синтаксис
- Документируйте функции и классы с использованием docstrings
- Следуйте PEP 8 для форматирования кода
- Используйте async/await для асинхронных операций
- Предпочитайте f-строки для форматирования

## Обработка ошибок
- Всегда обрабатывайте исключения при вызове внешних процессов
- Предоставляйте информативные сообщения об ошибках
- Логируйте все ошибки для отладки

## Расширение плагина
Для добавления новых инструментов в плагин:

1. Добавьте новый инструмент в файл MCP-сервера `voice_avatar_mcp_starlette.py`
2. Добавьте соответствующие методы в файл `cursor_plugin/voice_avatar_plugin.py`
3. Обновите файл `cursor_plugin/extensions.py` для поддержки новой функциональности
4. Добавьте новую горячую клавишу в `cursor_plugin/hotkeys.json` при необходимости
5. Зарегистрируйте команду в `cursor_plugin/cursor.manifest.json`

## Дополнительная документация
- `/home/cyberkitty/my_mcp/cursor_plugin/README.md` - Основная документация по плагину
- `/home/cyberkitty/my_mcp/cursor_plugin/cursor_integration.md` - Подробная информация об интеграции с Cursor
- `/home/cyberkitty/my_mcp/cursor_plugin/voice_commands.md` - Инструкции по голосовым командам
- `/home/cyberkitty/my_mcp/systemd_setup.md` - Инструкции по настройке автозапуска MCP-сервера 